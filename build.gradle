import org.gradle.jvm.toolchain.JavaLanguageVersion

plugins {
   id "com.gradle.plugin-publish" version "0.15.0"
   id "com.github.breadmoirai.github-release" version "2.2.12"
   id 'groovy'
   id 'java-gradle-plugin'
   id 'org.unbroken-dome.test-sets' version '4.0.0'
   id "com.github.ben-manes.versions" version "0.39.0"
   id 'com.adarshr.test-logger' version '3.0.0'
   id 'build-dashboard'
}
ext.pluginName = rootProject.name

task cleanJunit(type: Delete) {
   delete getTestResultsDir()
}

task cleanLibs(type: Delete) {
   delete jar.destinationDirectory.files()
}

java {
   toolchain {
      languageVersion = JavaLanguageVersion.of(8)
   }
}

githubRelease {
   token findProperty('githubToken')
   owner 'RedPillAnalytics'
   repo rootProject.name
   overwrite true
   releaseAssets jar.destinationDirectory.files()
}

dependencies {
   implementation 'org.codehaus.groovy:groovy:3.0.8'
   implementation 'org.eclipse.jgit:org.eclipse.jgit:5.11.1.202105131744-r'
   testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
}

// Default artifact naming.
group = 'com.redpillanalytics'

repositories {
   mavenCentral()
   maven {
      url "https://plugins.gradle.org/"
   }
}

gradlePlugin {
   plugins {
      pluginTemplate {
         id = "com.redpillanalytics.${pluginName}"
         implementationClass = 'com.redpillanalytics.gradle.properties.GradlePlugin'
      }
   }
}

pluginBundle {

   description = "Assists Plugin developers with assigning Gradle project properties to properties in the Plugin Extension."
   website = "https://github.com/RedPillAnalytics/${rootProject.name}/"
   vcsUrl = "https://github.com/RedPillAnalytics/${rootProject.name}/"

   plugins {
      pluginTemplate {
         id = "com.redpillanalytics.${pluginName}"
         displayName = pluginName
         tags = ['project-properties','plugin-development']
         version = project.version
      }
   }
}

// Options for all tests
task runAllTests {
   description 'Run all defined tests.'
   group 'verification'
}

tasks.withType(Test) {
   tasks.runAllTests.dependsOn it
   failFast true
   systemProperty 'projectDir', temporaryDir
   useJUnitPlatform()
}

// create a publish task
task publish {
   description 'Custom publish task.'
   group 'publishing'
   dependsOn tasks.publishPlugins, tasks.githubRelease
}

tasks.githubRelease.mustRunAfter tasks.publishPlugins

